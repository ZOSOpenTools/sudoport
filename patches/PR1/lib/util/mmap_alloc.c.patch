diff --git a/lib/util/mmap_alloc.c b/lib/util/mmap_alloc.c
index cd678a0..6ae5578 100644
--- a/lib/util/mmap_alloc.c
+++ b/lib/util/mmap_alloc.c
@@ -35,6 +35,7 @@
 #elif defined(HAVE_INTTYPES_H)
 # include <inttypes.h>
 #endif
+#include <fcntl.h>
 
 #include "sudo_compat.h"
 #include "sudo_util.h"
@@ -62,7 +63,16 @@ sudo_mmap_alloc_v1(size_t size)
 {
     void *ptr;
     unsigned long *ulp;
-#ifndef MAP_ANON
+#if defined(__MVS__)
+    /* z/OS does not support (anonymous) mmap fully */
+    size += sizeof(unsigned long);
+    ptr = malloc(size);
+    if (ptr == NULL) {
+       errno = ENOMEM;
+       return NULL;
+    }
+    memset(ptr, 0, size);
+#elif !defined(MAP_ANON)
     int fd;
 
     /* SunOS-style mmap allocation using /dev/zero. */
@@ -131,6 +141,10 @@ sudo_mmap_strdup_v1(const char *str)
 int
 sudo_mmap_protect_v1(void *ptr)
 {
+#ifdef __MVS__
+    /* z/OS does not support (anonymous) mmap fully */
+      return 0;
+#endif
     if (ptr != NULL) {
 	unsigned long *ulp = ptr;
 	const unsigned long size = ulp[-1];
@@ -154,7 +168,11 @@ sudo_mmap_free_v1(void *ptr)
 	const unsigned long size = ulp[0];
 	int saved_errno = errno;
 
+#ifdef __MVS__
+	free(ulp);
+#else
 	(void)munmap((void *)ulp, size);
+#endif
 	errno = saved_errno;
     }
 }
