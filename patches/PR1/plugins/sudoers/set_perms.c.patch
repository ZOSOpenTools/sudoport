diff --git a/plugins/sudoers/set_perms.c b/plugins/sudoers/set_perms.c
index 9f80094..ccc4646 100644
--- a/plugins/sudoers/set_perms.c
+++ b/plugins/sudoers/set_perms.c
@@ -217,6 +217,20 @@ set_perms(const struct sudoers_context *ctx, int perm)
 		goto bad;
 	    }
 	}
+#ifdef __MVS__
+  /* can't change EUID directly */
+  if (getuid() == ROOT_UID &&
+      geteuid() == ROOT_UID &&
+      user_uid != ROOT_UID)
+  {
+      state->ruid = user_uid;
+      state->euid = ROOT_UID;
+      if (UID_CHANGED && setreuid(ID(ruid), ROOT_UID)) {
+          strlcpy(errbuf, _("unable to change to user ruid"), sizeof(errbuf));
+          goto bad;
+      }
+  }
+#endif /* __MVS__ */
 	state->ruid = ctx->user.uid;
 	state->euid = ctx->user.uid;
 	state->suid = ROOT_UID;
@@ -234,6 +248,20 @@ set_perms(const struct sudoers_context *ctx, int perm)
 
     case PERM_FULL_USER:
 	/* headed for exec() */
+#ifdef __MVS__
+  /* can't change RUID and EUID directly */
+  if (getuid() == ROOT_UID &&
+      geteuid() == ROOT_UID &&
+      user_uid != ROOT_UID)
+  {
+      state->ruid = user_uid;
+      state->euid = ROOT_UID;
+      if (UID_CHANGED && setreuid(ID(ruid), ROOT_UID)) {
+          strlcpy(errbuf, _("unable to change to full user ruid"), sizeof(errbuf));
+         goto bad;
+      }
+  }
+#endif /* __MVS__ */
 	state->rgid = ctx->user.gid;
 	state->egid = ctx->user.gid;
 	state->sgid = ctx->user.gid;
@@ -287,6 +315,19 @@ set_perms(const struct sudoers_context *ctx, int perm)
 	    errstr = N_("unable to set runas group vector");
 	    goto bad;
 	}
+#ifdef __MVS__
+   /* can't change EUID directly */
+   if (ostate->euid == ROOT_UID)
+   {
+       state->ruid = runas_pw ? runas_pw->pw_uid : user_uid;
+       state->euid = ROOT_UID;
+       if (UID_CHANGED && setreuid(ID(ruid), ROOT_UID)) {
+           strlcpy(errbuf, _("unable to change to runas ruid"), sizeof(errbuf));
+           goto bad;
+       }
+  }
+#endif /* __MVS__ */
+#ifndef __MVS__
 	state->ruid = ostate->ruid;
 	state->euid = ctx->runas.pw ? ctx->runas.pw->pw_uid : ctx->user.uid;
 	state->suid = ostate->suid;
@@ -298,6 +339,7 @@ set_perms(const struct sudoers_context *ctx, int perm)
 	    errstr = N_("unable to change to runas uid");
 	    goto bad;
 	}
+#endif
 	break;
 
     case PERM_SUDOERS: {
@@ -351,6 +393,19 @@ set_perms(const struct sudoers_context *ctx, int perm)
 	state->rgid = ostate->rgid;
 	state->egid = ostate->egid;
 	state->sgid = ostate->sgid;
+#ifdef __MVS__
+        /* can't change EUID directly */
+        if (ostate->euid == ROOT_UID)
+        {
+            state->ruid = timestamp_uid;
+            state->euid = ROOT_UID;
+/*            if (UID_CHANGED && setreuid(ID(ruid), ID(euid))) { */
+            if (UID_CHANGED && setreuid(ID(ruid), ROOT_UID)) {
+                strlcpy(errbuf, _("unable to change to timestamp ruid"), sizeof(errbuf));
+                goto bad;
+            }
+        }
+#endif /* __MVS__ */
 	state->ruid = ROOT_UID;
 	state->euid = timestamp_get_uid();
 	state->suid = ROOT_UID;
@@ -1048,14 +1103,31 @@ set_perms(const struct sudoers_context *ctx, int perm)
 	    goto bad;
 	}
 
+/*TODO: avoid for now due to setreuid issue */
+#ifndef __MVS__
 	state->ruid = ROOT_UID;
 	/*
 	 * If sudoers_uid == ROOT_UID and sudoers_mode is group readable
 	 * we use a non-zero uid in order to avoid NFS lossage.
 	 * Using uid 1 is a bit bogus but should work on all OS's.
 	 */
-	if (sudoers_uid == ROOT_UID && (sudoers_mode & S_IRGRP))
+	if (sudoers_uid == ROOT_UID && (sudoers_mode & S_IRGRP)) {
+#ifdef __MVS__
+      /* uid 1 may not exist on z/OS, find the first non-zero uid */
+      struct passwd *pwd;
+      state->euid = -1;
+      setpwent();
+      while ((pwd = getpwent()) != NULL) {
+          if (pwd->pw_uid > 0) {
+              state->euid = pwd->pw_uid;
+              break;
+          }
+      }
+      endpwent();
+#else
 	    state->euid = 1;
+#endif
+  }
 	else
 	    state->euid = sudoers_uid;
 	sudo_debug_printf(SUDO_DEBUG_INFO, "%s: PERM_SUDOERS: uid: "
@@ -1067,6 +1139,7 @@ set_perms(const struct sudoers_context *ctx, int perm)
 		(int)ID(ruid), (int)ID(euid));
 	    goto bad;
 	}
+#endif
 	break;
     }
 
@@ -1103,6 +1176,10 @@ bool
 restore_perms(void)
 {
     struct perm_state *state, *ostate;
+#ifdef __MVS__
+    uid_t prev_ruid;
+    uid_t prev_euid;
+#endif /* __MVS__ */
     debug_decl(restore_perms, SUDOERS_DEBUG_PERMS);
 
     if (perm_stack_depth < 2) {
@@ -1140,11 +1217,33 @@ restore_perms(void)
 	    goto bad;
 	}
     }
+#ifdef __MVS__
+    /* can't change EUID directly */
+    prev_ruid = getuid();
+    prev_euid = geteuid();
+
+    if (geteuid() == ROOT_UID)
+    {
+        if (setreuid(OID(ruid), ROOT_UID)) {
+            sudo_warn("unable to restore ruid %d -> %d", (int)prev_ruid,
+                (int)OID(ruid));
+            goto bad;
+        }
+    }
+    prev_ruid = getuid();
+    prev_euid = geteuid();
+    if (setreuid(OID(ruid), OID(euid))) {
+       sudo_warn("setreuid() [%d, %d] -> [%d, %d]", (int)prev_ruid,
+            (int)prev_euid, (int)OID(ruid), (int)OID(euid));
+        goto bad;
+    }
+#else /* !__MVS__ */
     if (setreuid(OID(ruid), OID(euid))) {
 	sudo_warn("setreuid() [%d, %d] -> [%d, %d]", (int)state->ruid,
 	    (int)state->euid, (int)OID(ruid), (int)OID(euid));
 	goto bad;
     }
+#endif
     if (setregid(OID(rgid), OID(egid))) {
 	sudo_warn("setregid() [%d, %d] -> [%d, %d]", (int)state->rgid,
 	    (int)state->egid, (int)OID(rgid), (int)OID(egid));
