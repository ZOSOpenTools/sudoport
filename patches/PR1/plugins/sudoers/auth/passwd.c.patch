diff --git a/plugins/sudoers/auth/passwd.c b/plugins/sudoers/auth/passwd.c
index 6967e4f..0acf342 100644
--- a/plugins/sudoers/auth/passwd.c
+++ b/plugins/sudoers/auth/passwd.c
@@ -21,8 +21,8 @@
  */
 
 /*
- * This is an open source non-commercial project. Dear PVS-Studio, please check it.
- * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
+ * This is an open source non-commercial project. Dear PVS-Studio, please check
+ * it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
  */
 
 #include <config.h>
@@ -33,98 +33,149 @@
 #include <string.h>
 #include <unistd.h>
 #include <pwd.h>
+#include <errno.h>
 
 #include "sudoers.h"
 #include "sudo_auth.h"
 
-#define DESLEN			13
-#define HAS_AGEINFO(p, l)	(l == 18 && p[DESLEN] == ',')
 
-int
-sudo_passwd_init(struct passwd *pw, sudo_auth *auth)
-{
-    debug_decl(sudo_passwd_init, SUDOERS_DEBUG_AUTH);
+#define DESLEN 13
+#define HAS_AGEINFO(p, l) (l == 18 && p[DESLEN] == ',')
+
+int sudo_passwd_init(struct passwd *pw, sudo_auth *auth) {
+  debug_decl(sudo_passwd_init, SUDOERS_DEBUG_AUTH);
 
-    /* Only initialize once. */
-    if (auth->data != NULL)
-	debug_return_int(AUTH_SUCCESS);
+  /* Only initialize once. */
+  if (auth->data != NULL)
+    debug_return_int(AUTH_SUCCESS);
 
 #ifdef HAVE_SKEYACCESS
-    if (skeyaccess(pw, user_tty, NULL, NULL) == 0)
-	debug_return_int(AUTH_FAILURE);
+  if (skeyaccess(pw, user_tty, NULL, NULL) == 0)
+    debug_return_int(AUTH_FAILURE);
+#endif
+  sudo_setspent();
+  auth->data = sudo_getepw(pw);
+  sudo_endspent();
+#ifdef __MVS__
+  debug_return_int(AUTH_SUCCESS);
+#else
+  debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_FATAL);
 #endif
-    sudo_setspent();
-    auth->data = sudo_getepw(pw);
-    sudo_endspent();
-    debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_FATAL);
 }
 
-#ifdef HAVE_CRYPT
-int
-sudo_passwd_verify(struct passwd *pw, const char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)
+#ifdef __MVS__
+int sudo_passwd_verify(struct passwd *pw, const char *pass, sudo_auth *auth,
+                       struct sudo_conv_callback *callback) 
 {
-    char des_pass[9], *epass;
-    char *pw_epasswd = auth->data;
-    size_t pw_len;
-    int matched = 0;
-    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
-
-    /* An empty plain-text password must match an empty encrypted password. */
-    if (pass[0] == '\0')
-	debug_return_int(pw_epasswd[0] ? AUTH_FAILURE : AUTH_SUCCESS);
-
-    /*
-     * Truncate to 8 chars if standard DES since not all crypt()'s do this.
-     */
-    pw_len = strlen(pw_epasswd);
-    if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {
-	strlcpy(des_pass, pass, sizeof(des_pass));
-	pass = des_pass;
-    }
-
-    /*
-     * Normal UN*X password check.
-     * HP-UX may add aging info (separated by a ',') at the end so
-     * only compare the first DESLEN characters in that case.
-     */
-    epass = (char *) crypt(pass, pw_epasswd);
-    if (epass != NULL) {
-	if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)
-	    matched = !strncmp(pw_epasswd, epass, DESLEN);
-	else
-	    matched = !strcmp(pw_epasswd, epass);
+  debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
+  /* Use __passwd() to validate the password. z/OS doesn't include
+     the password in the passwd structure, so we cannot simply do
+     a string compare like the sudo code does. */
+  int passwd_res = __passwd(pw->pw_name, pass, NULL);
+  if (passwd_res) {
+    switch (errno) {
+    case EINVAL:
+      /* If no password, then give surrogate error message.*/
+      if (NULL == pass) {
+        log_warning(0, "User is not a surrogate of \"%s\"\n", pw->pw_name);
+      } else {
+        /* Depending on release, PASS_MAX may support a larger password
+         length than getpass() allows.  This means getpass() can
+         return a password less than PASS_MAX, but longer than
+         the security product (or other layers) will accept.
+         This means we can get length errors from __passwd().
+         Send a message based on whether password was given. */
+        if (*pass == '\0') {
+          log_warning(0, "No password entered\n");
+        } else {
+          log_warning(0, "Invalid password entered: reason code = %08X\n", __errno2());
+                      
+        }
+      }
+      break;
+    case EMVSERR:
+      log_warning(0, "Program loaded from an uncontrolled library\n");
+      break;
+    case EMVSEXPIRE:
+      log_warning(0, "Password expired\n");
+      break;
+    case ESRCH:
+      log_warning(0,
+                  "User ID \"%s\" does not exist, or "
+                  "the RACF profile does not contain an OMVS segment\n",
+                  pw->pw_name);
+      break;
+    default:
+      log_warning(0, "Password incorrect for \"%s\"\n", pw->pw_name);
+      break;
     }
-
-    explicit_bzero(des_pass, sizeof(des_pass));
-
-    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);
+  }
+  debug_return_int(passwd_res ? AUTH_FAILURE : AUTH_SUCCESS);
+}
+#else /* !__MVS__ */
+#ifdef HAVE_CRYPT
+int sudo_passwd_verify(struct passwd *pw, const char *pass, sudo_auth *auth,
+                       struct sudo_conv_callback *callback) {
+  char des_pass[9], *epass;
+  char *pw_epasswd = auth->data;
+  size_t pw_len;
+  int matched = 0;
+  debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
+
+  /* An empty plain-text password must match an empty encrypted password. */
+  if (pass[0] == '\0')
+    debug_return_int(pw_epasswd[0] ? AUTH_FAILURE : AUTH_SUCCESS);
+
+  /*
+   * Truncate to 8 chars if standard DES since not all crypt()'s do this.
+   */
+  pw_len = strlen(pw_epasswd);
+  if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {
+    strlcpy(des_pass, pass, sizeof(des_pass));
+    pass = des_pass;
+  }
+
+  /*
+   * Normal UN*X password check.
+   * HP-UX may add aging info (separated by a ',') at the end so
+   * only compare the first DESLEN characters in that case.
+   */
+  epass = (char *)crypt(pass, pw_epasswd);
+  if (epass != NULL) {
+    if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)
+      matched = !strncmp(pw_epasswd, epass, DESLEN);
+    else
+      matched = !strcmp(pw_epasswd, epass);
+  }
+
+  explicit_bzero(des_pass, sizeof(des_pass));
+
+  debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);
 }
 #else
-int
-sudo_passwd_verify(struct passwd *pw, const char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)
-{
-    char *pw_passwd = auth->data;
-    int matched;
-    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
+int sudo_passwd_verify(struct passwd *pw, const char *pass, sudo_auth *auth,
+                       struct sudo_conv_callback *callback) {
+  char *pw_passwd = auth->data;
+  int matched;
+  debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
 
-    /* Simple string compare for systems without crypt(). */
-    matched = !strcmp(pass, pw_passwd);
+  /* Simple string compare for systems without crypt(). */
+  matched = !strcmp(pass, pw_passwd);
 
-    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);
+  debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);
 }
 #endif
+#endif
 
-int
-sudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force)
-{
-    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);
+int sudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force) {
+  debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);
 
-    if (auth->data != NULL) {
-	/* Zero out encrypted password before freeing. */
-	size_t len = strlen((char *)auth->data);
-	freezero(auth->data, len);
-	auth->data = NULL;
-    }
+  if (auth->data != NULL) {
+    /* Zero out encrypted password before freeing. */
+    size_t len = strlen((char *)auth->data);
+    freezero(auth->data, len);
+    auth->data = NULL;
+  }
 
-    debug_return_int(AUTH_SUCCESS);
+  debug_return_int(AUTH_SUCCESS);
 }
