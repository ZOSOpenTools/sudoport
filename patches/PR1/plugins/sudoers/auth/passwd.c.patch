diff --git a/plugins/sudoers/auth/passwd.c b/plugins/sudoers/auth/passwd.c
index 0b1fcde..5d95a22 100644
--- a/plugins/sudoers/auth/passwd.c
+++ b/plugins/sudoers/auth/passwd.c
@@ -21,8 +21,8 @@
  */
 
 /*
- * This is an open source non-commercial project. Dear PVS-Studio, please check it.
- * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
+ * This is an open source non-commercial project. Dear PVS-Studio, please check
+ * it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com
  */
 
 #include <config.h>
@@ -33,6 +33,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <pwd.h>
+#include <errno.h>
 
 #include <sudoers.h>
 #include "sudo_auth.h"
@@ -57,9 +58,62 @@ sudo_passwd_init(const struct sudoers_context *ctx, struct passwd *pw,
     sudo_setspent();
     auth->data = sudo_getepw(pw);
     sudo_endspent();
-    debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_ERROR);
+#ifdef __MVS__
+    debug_return_int(AUTH_SUCCESS);
+#else
+    debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_FATAL);
+ #endif
 }
 
+#ifdef __MVS__
+int sudo_passwd_verify(const struct sudoers_context *ctx, struct passwd *pw,
+    const char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)
+{
+  debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);
+  /* Use __passwd() to validate the password. z/OS doesn't include
+     the password in the passwd structure, so we cannot simply do
+     a string compare like the sudo code does. */
+  int passwd_res = __passwd(pw->pw_name, pass, NULL);
+  if (passwd_res) {
+    switch (errno) {
+    case EINVAL:
+      /* If no password, then give surrogate error message.*/
+      if (NULL == pass) {
+        log_warningx(ctx, 0, N_("User is not a surrogate of \"%s\"\n"), pw->pw_name);
+      } else {
+        /* Depending on release, PASS_MAX may support a larger password
+         length than getpass() allows.  This means getpass() can
+         return a password less than PASS_MAX, but longer than
+         the security product (or other layers) will accept.
+         This means we can get length errors from __passwd().
+         Send a message based on whether password was given. */
+        if (*pass == '\0') {
+          log_warningx(ctx, 0, N_("No password entered\n"));
+        } else {
+          log_warningx(ctx, 0, N_("Invalid password entered: reason code = %08X\n"), __errno2());
+        }
+      }
+      break;
+    case EMVSERR:
+      log_warningx(ctx, 0, N_("Program loaded from an uncontrolled library\n"));
+      break;
+    case EMVSEXPIRE:
+      log_warningx(ctx, 0, N_("Password expired\n"));
+      break;
+    case ESRCH:
+      log_warningx(ctx, 0, 
+                N_("User ID \"%s\" does not exist, or "
+                   "the RACF profile does not contain an OMVS segment\n"),
+                   pw->pw_name);
+      break;
+    default:
+      log_warningx(ctx, 0, N_("Password incorrect for \"%s\"\n"), pw->pw_name);
+      break;
+    }
+  }
+  debug_return_int(passwd_res ? AUTH_FAILURE : AUTH_SUCCESS);
+}
+#else /* !__MVS__ */
 #ifdef HAVE_CRYPT
 int
 sudo_passwd_verify(const struct sudoers_context *ctx, struct passwd *pw,
@@ -123,6 +177,7 @@ sudo_passwd_verify(const struct sudoers_context *ctx, struct passwd *pw,
     debug_return_int(ret);
 }
 #endif
+#endif
 
 int
 sudo_passwd_cleanup(const struct sudoers_context *ctx, struct passwd *pw,
